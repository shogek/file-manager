import { app, BrowserWindow, ipcMain } from 'electron'
import { ipcService } from '../server/services/ipc.service'
import { IpcCreateFolderArgs, IpcDeleteDirentArgs, IpcOpenFileArgs, IpcReadWorkingFolderArgs } from '../shared/types'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
   app.quit()
}

const createWindow = (): void => {
   // Create the browser window.
   const mainWindow = new BrowserWindow({
      height: 800,
      width: 1400,
      webPreferences: {
         preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
   })

   mainWindow.removeMenu()

   // and load the index.html of the app.
   mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

   // Open the DevTools.
   mainWindow.webContents.openDevTools()
}

const createDirentPropertiesWindow = (): void => {
   const window = new BrowserWindow({
      height: 800,
      width: 1400,
      webPreferences: {
         preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
   })

   window.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
   ipcMain.handle('app-create-folder', (_, args: IpcCreateFolderArgs) => ipcService.createFolder(args))

   ipcMain.handle('app-read-working-folder', (_, args: IpcReadWorkingFolderArgs) => ipcService.readWorkingFolder(args))

   ipcMain.handle('app-delete-dirent', (_, args: IpcDeleteDirentArgs) => ipcService.deleteDirent(args))

   ipcMain.handle('app-open-file', (_, args: IpcOpenFileArgs) => ipcService.openFile(args))

   createWindow()
   // createDirentPropertiesWindow()
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
   if (process.platform !== 'darwin') {
      app.quit()
   }
})

app.on('activate', () => {
   // On OS X it's common to re-create a window in the app when the
   // dock icon is clicked and there are no other windows open.
   if (BrowserWindow.getAllWindows().length === 0) {
      createWindow()
   }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
